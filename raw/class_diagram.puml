@startuml

class Chip {
 -ChipColor color
 +getColor()
}

enum ChipColor {
 +RED
 +WHITE
 +BLACK
}

class HexNode {
  - identifier string
  - stackLength int
  - chipsStack []Chip
  - childNodes map[EdgeType]*HexNode
  + GetIdentifier()
  + GetChildNodes()
  + SetChildNode()
  + traverse(nodePointer)
  + GetPossibleMovements()
  + IsEmpty()
  + GetStackLength()
  + GetChipStack()
  + GetTopChip()
  + AddChip()
  + Empty()
  + GetStraightAdjacentOnLevel(level)
  - _traverseInDirection(edgeType, nodePtr, depth)
  - presentIn([]*HexNode)
}

class DvonnBoard {
  - cells map[string]*HexNode: {id to node address map}
  + GetDvonnBoard()
  - initializeBoard()
  - getBoardCellsIds()
  + GetCells()
  + getNodesIdentifiers(nodes []*HexNode)
  + Fill (id, chips)
  + DeFill(id)
  + GetBoardSnapshot()
  + GetRedChipsIds()
  + GetCellIdsByStackColor(color ChipColor)
  + GetCountOfPiecesControlledBy(color ChipColor)
  + GetDisconnectedCells()
  - traverseConnectedNodes(nodePtr)
  - _traverse(nodePtr, res)
  + RemoveDisconnectedCells()
  + IsCellEmpty(id)
  + GetPossibleMoveFor(id string)
}

class Player {
  - String name
  - String id
  + getName()
  + getId()
}

enum GamePhase {
  + PLACEMENT
  + MOVEMENT
}

enum EdgeType {
  UPPER_EDGE
  LEFTUPPER_EDGE
  LEFTBOTTON_EDGE
  BOTTON_EDGE
  RIGHTUPPER_EDGE
  RIGHTBOTTON_EDGE
}

enum WinnerColor {
  WINNER_UNKNOWN
  WINNER_WHITE
  WINNER_BLACK
  WINNER_DRAW
}

class MatchResult {
	- winningColor WinnerColor
	- winnerScore int
	- loserScore int

}

enum ErrorCode {
	ERROR_UNKNOWN ErrorCode = iota
	ERROR_ARGUMENT_COUNT_MISMATCH
	ERROR_INVALID_PLAYER_TURN
	ERROR_DESTINATION_ALREADY_OCCUPIED

	ERROR_INVALID_GAME_PHASE
	ERROR_EMPTY_ORIGIN_DESTINATION
	ERROR_EMPTY_ORIGIN
	ERROR_EMPTY_DESTINATION
	ERROR_NO_FREE_ADJACENT_FOUND
	ERROR_INVALID_DESTINATION_SELECTED
}

class MoveResult {
	- isGameOver      bool
	- isActionSuccess bool
	- errorCode       ErrorCode
	- errorMessage    string
	- err             error
	- gamePhase       GamePhase
	- nextPlayer      Player
	+ GetMoveResult()
	+ SetNextPlayer()
	+ IsGameOver()
	+ GetNextPlayer()
	+ IsActionSuccess()
	+ GetErrorCode()
	+ GetErrorMessage()
}

class DvonnGame {
	- board       *DvonnBoard
	- players     []Player
	- currentTurn Player
	- gamePhase   GamePhase
	- unusedChips int
  + GetDvonnGame([]Player, Player)
  - togglePlayer()
  - getOppositeColoredPlayer(Player, positions...)
  + GetPlayerByColor(ChipColor)
  + GetPlayers()
  + AddPlayer()
  + RemovePlayer()
  + GetCurrentPlayer()
  + GetGamePhase()
  + Move(Player, paths ...)
  - move()
  - _canPlace()
  - _canMove()
  - isPlayerTurnValid()
  + IsValidMoveLeftForPlayer(playerColor ChipColor)
  + HasNextPlayerAValidMove(currentPlayer Player)
  + IsGameOver()
  + GetGameWinner()
  + GetNextTurnPlayer()
}

ChipColor --> Chip : uses
Chip --> HexNode : uses
EdgeType --> HexNode : uses
HexNode --> DvonnBoard : uses
Player --> DvonnGame : uses
GamePhase --> DvonnGame : uses
DvonnBoard --> DvonnGame : uses
WinnerColor --> MatchResult : uses
MatchResult --> DvonnGame : uses
ErrorCode --> MoveResult : uses
MoveResult --> DvonnGame : uses

@enduml